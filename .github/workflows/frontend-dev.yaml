name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
    paths-ignore:
      - 'Kubernetes/**'
      - 'Terraform/**'
      - '.github/workflows/backend.yaml'
  pull_request:
    branches:
      - dev

jobs:
  sonarcloud_scan:
    runs-on: ubuntu-latest
    steps:
      # Set up Java 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install unzip
      - name: Install unzip
        run: sudo apt-get install -y unzip

      # Install SonarScanner
      - name: Install SonarScanner
        run: |
          wget -qO- https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip -O /tmp/sonar-scanner.zip
          unzip /tmp/sonar-scanner.zip -d /tmp
          echo "/tmp/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      # SonarQube Scan
      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=frontend \
            -Dsonar.sources=./frontend \
            -Dsonar.host.url=http://174.129.91.46:9000 \
            -Dsonar.login=$SONAR_TOKEN

  docker_build_scan_push:
    needs: sonarcloud_scan
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install AWS CLI (if needed for additional AWS commands later)
      - name: Install AWS CLI
        run: sudo apt-get install -y awscli

      # Configure AWS credentials using GitHub secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Log in to DockerHub with Token
      - name: Log in to DockerHub with Token
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build Docker image
      - name: Build Docker image
        run: |
          docker build -t frontend ./frontend

      # Tag Docker image with the correct ECR repository URI
      - name: Tag Docker image
        id: tag-image
        run: |
          IMAGE_URI=${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
          echo "Image URI is: $IMAGE_URI"  # Debugging: Print IMAGE_URI value
          docker tag frontend $IMAGE_URI
          echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_ENV  # Set IMAGE_URI for later steps

      # Trivy scan Docker image for vulnerabilities
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}  # Explicitly pass the image reference
        env:
          IMAGE_URI: ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}  # Ensure IMAGE_URI is available as env variable

      # Push Docker image to AWS ECR
      - name: Push Docker image to AWS ECR
        run: |
          echo "Pushing Docker image to AWS ECR..."
          docker push ${{ env.IMAGE_URI }}  # Use the IMAGE_URI from the environment variable

  update-newtag-in-helm-chart:
    runs-on: ubuntu-latest

    needs: docker_build_scan_push

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GIT_TOKEN }}

    - name: Update tag in Helm chart
      run: |
        sed -i 's/tag: .*/tag: "${{ github.sha }}"/' Kubernetes/helm/fastapi-chart/values-frontend-dev.yaml

    - name: Commit and push changes
      run: |
        git config --global user.email "isaacambi2@gmail.com"
        git config --global user.name "isaacambi"
        git add Kubernetes/helm/fastapi-chart/values-frontend-dev.yaml
        git commit -m "Update tag in Helm chart Frontend dev"
        git push
